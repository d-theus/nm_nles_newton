!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
BIN	Makefile	/^	BIN=program$/;"	m
CC	Makefile	/^CC=g++$/;"	m
CFLAGS	Makefile	/^CFLAGS=-Wall -std=c++11$/;"	m
Det	main.cpp	/^	function<double(V2)> Det(){$/;"	f	class:MF2	access:public	signature:()
F2	main.cpp	/^	F2 (function<double(V2)> f1,function<double(V2)> f2){$/;"	f	class:F2	access:public	signature:(function<double(V2)> f1,function<double(V2)> f2)
F2	main.cpp	/^	F2(){}$/;"	f	class:F2	access:public	signature:()
F2	main.cpp	/^class F2 {$/;"	c	file:
F2::F2	main.cpp	/^	F2 (function<double(V2)> f1,function<double(V2)> f2){$/;"	f	class:F2	access:public	signature:(function<double(V2)> f1,function<double(V2)> f2)
F2::F2	main.cpp	/^	F2(){}$/;"	f	class:F2	access:public	signature:()
F2::f1	main.cpp	/^	function<double(V2)> f1,f2;$/;"	m	class:F2	file:	access:public
F2::f2	main.cpp	/^	function<double(V2)> f1,f2;$/;"	m	class:F2	file:	access:public
F2::jacobian	main.cpp	/^	MF2 jacobian() const {$/;"	f	class:F2	access:public	signature:() const
F2::operator ()	main.cpp	/^	V2 operator()(V2 x){V2 res(f1(x),f2(x));return res;};$/;"	f	class:F2	access:public	signature:(V2 x)
LDFLAGS	Makefile	/^LDFLAGS=$/;"	m
MF2	main.cpp	/^	MF2 (function<double(V2)> f1,function<double(V2)> f2,$/;"	f	class:MF2	access:public	signature:(function<double(V2)> f1,function<double(V2)> f2, function<double(V2)> f3,function<double(V2)> f4)
MF2	main.cpp	/^	MF2(){}$/;"	f	class:MF2	access:public	signature:()
MF2	main.cpp	/^class MF2 {$/;"	c	file:
MF2::Det	main.cpp	/^	function<double(V2)> Det(){$/;"	f	class:MF2	access:public	signature:()
MF2::MF2	main.cpp	/^	MF2 (function<double(V2)> f1,function<double(V2)> f2,$/;"	f	class:MF2	access:public	signature:(function<double(V2)> f1,function<double(V2)> f2, function<double(V2)> f3,function<double(V2)> f4)
MF2::MF2	main.cpp	/^	MF2(){}$/;"	f	class:MF2	access:public	signature:()
MF2::f11	main.cpp	/^	function<double(V2)> f11,f12,f21,f22;$/;"	m	class:MF2	file:	access:public
MF2::f12	main.cpp	/^	function<double(V2)> f11,f12,f21,f22;$/;"	m	class:MF2	file:	access:public
MF2::f21	main.cpp	/^	function<double(V2)> f11,f12,f21,f22;$/;"	m	class:MF2	file:	access:public
MF2::f22	main.cpp	/^	function<double(V2)> f11,f12,f21,f22;$/;"	m	class:MF2	file:	access:public
OBJ	Makefile	/^OBJ=$(SRC:.cpp=.o)$/;"	m
SRC	Makefile	/^SRC=main.cpp$/;"	m
V2	main.cpp	/^	V2(double _x=0, double _y=0) { x = _x; y = _y;};$/;"	f	class:V2	access:public	signature:(double _x=0, double _y=0)
V2	main.cpp	/^class V2 {$/;"	c	file:
V2::V2	main.cpp	/^	V2(double _x=0, double _y=0) { x = _x; y = _y;};$/;"	f	class:V2	access:public	signature:(double _x=0, double _y=0)
V2::norm	main.cpp	/^	double norm()const{return sqrt(x*x + y*y);};$/;"	f	class:V2	access:public	signature:() const
V2::operator *	main.cpp	/^	V2 operator* (double k){return V2(k*x, k*y);}$/;"	f	class:V2	access:public	signature:(double k)
V2::operator +	main.cpp	/^	V2 operator+ (V2 p2) {return V2(this->x + p2.x, this->y + p2.y);};$/;"	f	class:V2	access:public	signature:(V2 p2)
V2::operator -	main.cpp	/^	V2 operator- () {return V2(-x,-y);};$/;"	f	class:V2	access:public	signature:()
V2::operator -	main.cpp	/^	V2 operator- (V2 p2) {return *this +(-p2);};$/;"	f	class:V2	access:public	signature:(V2 p2)
V2::x	main.cpp	/^	double x,y;$/;"	m	class:V2	file:	access:public
V2::y	main.cpp	/^	double x,y;$/;"	m	class:V2	file:	access:public
diff	main.cpp	/^double diff(V2 p1, V2 p2) {return fabs(p1.x-p2.x) > fabs(p1.y-p2.y)?fabs(p1.x-p2.x):fabs(p1.y-p2.y);}$/;"	f	signature:(V2 p1, V2 p2)
f1	main.cpp	/^	function<double(V2)> f1,f2;$/;"	m	class:F2	file:	access:public
f11	main.cpp	/^	function<double(V2)> f11,f12,f21,f22;$/;"	m	class:MF2	file:	access:public
f12	main.cpp	/^	function<double(V2)> f11,f12,f21,f22;$/;"	m	class:MF2	file:	access:public
f2	main.cpp	/^	function<double(V2)> f1,f2;$/;"	m	class:F2	file:	access:public
f21	main.cpp	/^	function<double(V2)> f11,f12,f21,f22;$/;"	m	class:MF2	file:	access:public
f22	main.cpp	/^	function<double(V2)> f11,f12,f21,f22;$/;"	m	class:MF2	file:	access:public
find_root	main.cpp	/^V2 find_root(F2 f, V2 p0, double eps){$/;"	f	signature:(F2 f, V2 p0, double eps)
grad	main.cpp	/^F2 grad(function<double(V2)> f){$/;"	f	signature:(function<double(V2)> f)
grad	main.cpp	/^F2 grad(function<double(V2)>);$/;"	p	file:	signature:(function<double(V2)>)
gradient_descent	main.cpp	/^V2 gradient_descent(VecFun f, VecScal p0, double eps){$/;"	f	signature:(VecFun f, VecScal p0, double eps)
jacobian	main.cpp	/^	MF2 jacobian() const {$/;"	f	class:F2	access:public	signature:() const
main	main.cpp	/^int main(int argc, const char *argv[])$/;"	f	signature:(int argc, const char *argv[])
norm	main.cpp	/^	double norm()const{return sqrt(x*x + y*y);};$/;"	f	class:V2	access:public	signature:() const
operator ()	main.cpp	/^	V2 operator()(V2 x){V2 res(f1(x),f2(x));return res;};$/;"	f	class:F2	access:public	signature:(V2 x)
operator *	main.cpp	/^	V2 operator* (double k){return V2(k*x, k*y);}$/;"	f	class:V2	access:public	signature:(double k)
operator +	main.cpp	/^	V2 operator+ (V2 p2) {return V2(this->x + p2.x, this->y + p2.y);};$/;"	f	class:V2	access:public	signature:(V2 p2)
operator -	main.cpp	/^	V2 operator- () {return V2(-x,-y);};$/;"	f	class:V2	access:public	signature:()
operator -	main.cpp	/^	V2 operator- (V2 p2) {return *this +(-p2);};$/;"	f	class:V2	access:public	signature:(V2 p2)
x	main.cpp	/^	double x,y;$/;"	m	class:V2	file:	access:public
y	main.cpp	/^	double x,y;$/;"	m	class:V2	file:	access:public
